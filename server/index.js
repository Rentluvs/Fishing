const express = require('express');
const cors = require('cors');
const path = require('path');
const config = require('./config');
require('dotenv').config();

const initDatabase = require('./database/init');

const app = express();

// ----------------- Middleware c∆° b·∫£n -----------------
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Static files cho th∆∞ m·ª•c uploads (cache 1 ng√†y)
app.use('/uploads', express.static(path.join(__dirname, 'uploads'), {
  maxAge: '1d',
  etag: true,
  lastModified: true
}));

// Ph·ª•c v·ª• uploads qua /api ƒë·ªÉ t∆∞∆°ng th√≠ch proxy tr√™n hosting (cPanel th∆∞·ªùng proxy /api)
app.use('/api/uploads', express.static(path.join(__dirname, 'uploads'), {
  maxAge: '1d',
  etag: true,
  lastModified: true
}));

// Static files cho th∆∞ m·ª•c client/public/upload ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh upload t·ª´ client
app.use('/upload', express.static(path.join(__dirname, '..', 'client', 'public', 'upload'), {
  maxAge: '1d',
  etag: true,
  lastModified: true
}));

// ----------------- Healthcheck -----------------
app.get('/health', (req, res) => {
  res.json({ status: 'ok' });
});
// Routes
app.get("/health", (req, res) => {
  res.json({ status: "ok" });
});

// Route g·ªëc cho /api ƒë·ªÉ cPanel check
app.get("/api", (req, res) => {
  res.json({
    status: "ok",
    message: "Fish Management API running"
  });
});

// ----------------- API routes -----------------
app.get('/api', (req, res) => {
  res.json({ success: true, message: 'üêü Fish Management API is running!' });
});

app.get('/api/test', (req, res) => {
  res.json({ message: 'Fish Management API ƒëang ho·∫°t ƒë·ªông!' });
});

// G·∫Øn c√°c router con
app.use('/api/auth', require('./routes/auth').router);
app.use('/api/tanks', require('./routes/tanks'));
app.use('/api/batches', require('./routes/batches'));
app.use('/api/environment', require('./routes/environment'));
app.use('/api/expenses', require('./routes/expenses'));
app.use('/api/weather', require('./routes/weather'));
//app.use('/api/upload', require('./routes/upload'));

// ----------------- Error handling -----------------
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    success: false,
    message: 'C√≥ l·ªói x·∫£y ra!',
    error: config.nodeEnv === 'development' ? err.message : {}
  });
});

// ----------------- 404 handler -----------------
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'API endpoint kh√¥ng t·ªìn t·∫°i'
  });
});

// ----------------- Kh·ªüi t·∫°o DB & ch·∫°y server -----------------
initDatabase()
  .then(() => {
    app.listen(config.port, '0.0.0.0', () => {
      console.log(`üêü Fish Management Server ch·∫°y t·∫°i port ${config.port}`);
      console.log(`üåê API endpoint: http://localhost:${config.port}/api`);
    });
  })
  .catch(err => {
    console.error('‚ùå L·ªói kh·ªüi t·∫°o database:', err);
    process.exit(1);
  });
